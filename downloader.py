"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤.
"""

import time
from pathlib import Path
from datetime import timedelta

from spotdl import Spotdl
from spotdl.types.song import Song

from ui import UIManager
from lyrics import LyricsFetcher


class SpotifyDownloader:
    """
    –ö–ª–∞—Å—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏.
    """

    def __init__(self, output_dir: Path, download_lyrics: bool, ui: UIManager):
        self.output_dir = output_dir
        self.download_lyrics = download_lyrics
        self.ui = ui
        self.lyrics_fetcher = LyricsFetcher() if download_lyrics else None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SpotDL
        self.spotdl_client = Spotdl(
            client_id="YOUR_SPOTIFY_CLIENT_ID", # SpotDL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            client_secret="YOUR_SPOTIFY_CLIENT_SECRET",
            output=str(self.output_dir / "{artist} - {title}.{output-ext}"),
            ffmpeg="ffmpeg",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ffmpeg –≤ PATH
            bitrate="best",
            preload=False,
            threads=4,
            log_level="ERROR",
        )
        
        self.stats = {
            "success": 0,
            "failed": 0,
            "total_duration_ms": 0,
        }

    def download_from_list(self, file_path: Path):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.

        Args:
            file_path (Path): –ü—É—Ç—å –∫ .txt —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤.
        """
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                queries = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.ui.add_log_message(f"[bold red]–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {file_path}[/bold red]")
            return

        if not queries:
            self.ui.add_log_message("[bold yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç.[/bold yellow]")
            return

        self.ui.add_log_message(f"–ù–∞–π–¥–µ–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...")
        
        # –ò—â–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏ —Å—Ä–∞–∑—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        songs = self.spotdl_client.search(queries)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
        found_songs = [song for song in songs if song is not None]
        self.stats["failed"] = len(songs) - len(found_songs)

        if not found_songs:
            self.ui.add_log_message("[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.[/bold red]")
            return

        self.ui.add_log_message(f"–ù–∞–π–¥–µ–Ω–æ {len(found_songs)} —Ç—Ä–µ–∫–æ–≤. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
        time.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞

        task_id = self.ui.update_task_progress(total=len(found_songs))
        overall_id = self.ui.update_overall_progress(total=len(found_songs))

        for song in found_songs:
            self.process_song(song)
            self.ui.advance_progress(task_id, overall_id)
        
        self.ui.add_log_message("[bold green]–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/bold green]")

    def process_song(self, song: Song):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ–∫: —Å–∫–∞—á–∏–≤–∞–µ—Ç, –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç.
        """
        self.ui.add_log_message(f"‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞—é: [cyan]{song.name} - {song.artist}[/cyan]")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
        results = self.spotdl_client.download(song)
        
        if results and results[0] and results[0][1]: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
            downloaded_song_path = Path(results[0][1])
            self.stats["success"] += 1
            self.stats["total_duration_ms"] += song.duration_ms
            self.ui.add_log_message(f"‚úÖ  –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: [green]{song.name}[/green]")

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            if self.download_lyrics and self.lyrics_fetcher:
                if not self.lyrics_fetcher.is_active():
                    self.ui.add_log_message("[yellow]–¢–æ–∫–µ–Ω Genius API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ–∫—Å—Ç–æ–≤.[/yellow]")
                    self.download_lyrics = False # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
                    return

                self.ui.add_log_message(f"üìÑ  –ò—â—É —Ç–µ–∫—Å—Ç –¥–ª—è: [cyan]{song.name}[/cyan]")
                lyrics_found = self.lyrics_fetcher.fetch_lyrics(
                    track_name=song.name,
                    artist_name=song.artist,
                    output_dir=downloaded_song_path.parent
                )
                if lyrics_found:
                    self.ui.add_log_message(f"üìÑ  –¢–µ–∫—Å—Ç –¥–ª—è [green]{song.name}[/green] —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                else:
                    self.ui.add_log_message(f"‚ö†Ô∏è  –¢–µ–∫—Å—Ç –¥–ª—è [yellow]{song.name}[/yellow] –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            self.stats["failed"] += 1
            self.ui.add_log_message(f"‚ùå  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: [red]{song.name} - {song.artist}[/red]")

    def get_summary(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
        """
        total_duration = str(timedelta(milliseconds=self.stats["total_duration_ms"]))
        return {
            "success": self.stats["success"],
            "failed": self.stats["failed"],
            "total_duration": total_duration,
        }
