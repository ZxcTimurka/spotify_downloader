
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤.
"""

import os
import logging
from pathlib import Path
from datetime import timedelta

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from spotdl import Spotdl
from dotenv import load_dotenv


import ui
from lyrics import LyricsFetcher

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()


class SpotifyDownloader:
    """
    –ö–ª–∞—Å—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏.
    """

    def __init__(self, output_dir: Path, download_lyrics: bool):
        self.output_dir = output_dir
        self.download_lyrics = download_lyrics
        self.lyrics_fetcher = LyricsFetcher() if download_lyrics else None
        self.match_threshold = 90  # –û–±—â–∏–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SpotDL
        downloader_settings = {
            "output": str(self.output_dir / "{artist} - {title}.{output-ext}"),
            "ffmpeg": "ffmpeg",
            "bitrate": "320k",
            "threads": 4,
        }
        
        self.spotdl_client = Spotdl(
            client_id=os.getenv("SPOTIPY_CLIENT_ID"),
            client_secret=os.getenv("SPOTIPY_CLIENT_SECRET"),
            downloader_settings=downloader_settings,
        )

        self.spotify_client = spotipy.Spotify(
            auth_manager=SpotifyClientCredentials(
                client_id=os.getenv("SPOTIPY_CLIENT_ID"),
                client_secret=os.getenv("SPOTIPY_CLIENT_SECRET")
            )
        )
        
        self.stats = {
            "success": 0,
            "failed": 0,
            "total_duration_ms": 0,
        }

    def download_from_list(self, file_path: Path):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ.
        """
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                queries = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            ui.log(f"[bold red]–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {file_path}[/bold red]")
            return

        if not queries:
            ui.log("[bold yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç.[/bold yellow]")
            return

        total_queries = len(queries)
        ui.log(f"–ù–∞–π–¥–µ–Ω–æ {total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–∞—á–∏–Ω–∞—é –ø–æ–æ—á–µ—Ä–µ–¥–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        for i, query in enumerate(queries, 1):
            ui.log(f"\n[bold]({i}/{total_queries})[/bold] üîç –ò—â—É —Ç—Ä–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: [cyan]'{query}'[/cyan]")

            spotify_track_url = None
            query_parts = query.rsplit(" - ", 1)
            
            if len(query_parts) == 2:
                artist_query, track_query = query_parts
                search_q = f"track:{track_query} artist:{artist_query}"
            else:
                search_q = f"track:{query}"

            try:
                results = self.spotify_client.search(q=search_q, type='track', limit=1)
                if results and results['tracks']['items']:
                    spotify_track_url = results['tracks']['items'][0]['external_urls']['spotify']
                    track_name = results['tracks']['items'][0]['name']
                    track_artists = ", ".join([artist['name'] for artist in results['tracks']['items'][0]['artists']])
                    ui.log(f"‚úÖ –¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω –Ω–∞ Spotify: [green]'{track_name} - {track_artists}'[/green].")
                else:
                    ui.log(f"‚ùå –¢—Ä–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '[yellow]{query}[/yellow]' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Spotify.")
                    self.stats["failed"] += 1
                    continue
            except Exception as e:
                ui.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞ –Ω–∞ Spotify –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '[yellow]{query}[/yellow]': {e}")
                self.stats["failed"] += 1
                continue

            # Get the Song object from spotdl using the Spotify URL
            spotdl_song_list = self.spotdl_client.search([spotify_track_url])
            
            if not spotdl_song_list:
                ui.log(f"‚ùå SpotDL –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ URL: [yellow]{spotify_track_url}[/yellow]. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                self.stats["failed"] += 1
                continue
            
            song_to_download = spotdl_song_list[0] # Take the first (and likely only) result
            
            download_results = self.spotdl_client.download_songs([song_to_download])
            downloaded_song, path = download_results[0] if download_results else (None, None)

            if path:
                self.stats["success"] += 1
                self.stats["total_duration_ms"] += (downloaded_song.duration * 1000)
                ui.log(f"‚úÖ –¢—Ä–µ–∫ [green]'{downloaded_song.name}'[/green] —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.")

                lyrics_output_dir = self.output_dir / "lyrics"
                lyrics_output_dir.mkdir(exist_ok=True)

                if self.download_lyrics and self.lyrics_fetcher:
                    if not self.lyrics_fetcher.is_active():
                        ui.log("[yellow]–¢–æ–∫–µ–Ω Genius API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ–∫—Å—Ç–æ–≤.[/yellow]")
                        self.download_lyrics = False
                    else:
                        ui.log(f"üìÑ –ò—â—É —Ç–µ–∫—Å—Ç –¥–ª—è: [cyan]{downloaded_song.name}[/cyan]")
                        lyrics_found = self.lyrics_fetcher.fetch_lyrics(
                            track_name=downloaded_song.name,
                            artist_name=downloaded_song.artist,
                            output_dir=lyrics_output_dir
                        )
                        if lyrics_found:
                            ui.log(f"üìÑ –¢–µ–∫—Å—Ç –¥–ª—è [green]{downloaded_song.name}[/green] —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                        else:
                            ui.log(f"‚ö†Ô∏è  –¢–µ–∫—Å—Ç –¥–ª—è [yellow]{downloaded_song.name}[/yellow] –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                self.stats["failed"] += 1
                ui.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫: [red]'{song_to_download.name} - {song_to_download.artist}'[/red]")

        ui.log("\n[bold green]–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/bold green]")

    def get_summary(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
        """
        total_duration = str(timedelta(milliseconds=self.stats["total_duration_ms"]))
        return {
            "success": self.stats["success"],
            "failed": self.stats["failed"],
            "total_duration": total_duration,
        }
